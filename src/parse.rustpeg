use script::*;

#[pub]
script -> Script
       = s:selector_section m:mode_separator a:action_section { Script {selector:s, mode:m, action:a} }

// Common tokens

space_separator = [ \t]+

ws = [ \t]*

ident -> String
      = [a-zA-Z_][a-zA-Z0-9_\-]* { match_str.to_string() }
      
s_string -> String
         = "'" s:s_char* "'" { s.into_iter().collect() }
         
d_string -> String
         = "\"" s:d_char* "\"" { s.into_iter().collect() }

s_char -> char
       = !"'" { match_str.chars().next().unwrap() }

d_char -> char
       = !"\"" { match_str.chars().next().unwrap() }

int -> i64
    = "0" { 0 + 0 } / [1-9][0-9]* { match_str.parse().unwrap() }

indexer = "."
eacher = "->"



sint -> i64
    = "-" v:int { -v } /
      int

action_literal -> ActionExpr
               = i:int { ActionExpr::Integer(i) } /
                 s:s_string { ActionExpr::String(s) } /
                 d:d_string { ActionExpr::String(d) } /
                 v:ident { ActionExpr::Variable(v) }

action_object_index -> ActionExpr
                    = indexer n:object_index_name { ActionExpr::ObjectIndex(n) }

action_array_index -> ActionExpr
                   = indexer l_square i:sint r_square { ActionExpr::ArrayIndex(i) }

object_index_name -> String
             = ident / s_string / d_string



l_square = "[" ws
r_square = ws "]"
colon = ws ":" ws

mode_separator -> ActionMode
               = ws "@" ws { ActionMode::ForSelf } /
                 ws "%" ws { ActionMode::ForEach }

action_separator = ws ";" ws

selector_section -> Vec<Selector>
                 = selector*

selector -> Selector
         = indexer s:sop { Selector::ForSelf(s) } /
           eacher s:sop { Selector::ForEach(s) }

sop -> Sop
         = array_sop / object_sop

array_sop -> Sop
               = array_index_sop / array_slice_sop

array_index_sop -> Sop
    = l_square index:sint r_square { Sop::ArrayIndex(index) }
    
array_slice_sop -> Sop
    = l_square start:sint? colon end:sint? r_square { Sop::ArraySlice(ArraySlice::new(start, end, None)) }

object_sop -> Sop
                = wildcard_object_sop / member_object_sop

wildcard_object_sop -> Sop
    = "*" { Sop::Object(ObjectIndexer::Wildcard) }

member_object_sop -> Sop
    = object_index_name { Sop::Object(ObjectIndexer::Exact(match_str.to_string())) }

action_section -> Vec<Function>
                 = action_func ** action_separator

action_func -> Function
    = n:ident space_separator p:action_expr_list { Function {name: n, args: p} }

action_expr_list -> Vec<ActionExpr>
                = action_expr ** space_separator

action_expr -> ActionExpr
            = action_literal / action_object_index / action_array_index