// Generated by rust-peg. Do not edit.
#![allow(non_snake_case, unused)]
use script::*;
use self::RuleResult::{Matched, Failed};
fn escape_default(s: &str) -> String {
    s.chars().flat_map(|c| c.escape_default()).collect()
}
fn char_range_at(s: &str, pos: usize) -> (char, usize) {
    let c = &s[pos..].chars().next().unwrap();
    let next_pos = pos + c.len_utf8();
    (*c, next_pos)
}
#[derive(Clone)]
enum RuleResult<T> { Matched(usize, T), Failed, }
#[derive(PartialEq, Eq, Debug, Clone)]
pub struct ParseError {
    pub line: usize,
    pub column: usize,
    pub offset: usize,
    pub expected: ::std::collections::HashSet<&'static str>,
}
pub type ParseResult<T> = Result<T, ParseError>;
impl ::std::fmt::Display for ParseError {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter)
     -> ::std::result::Result<(), ::std::fmt::Error> {
        try!(write ! (
             fmt , "error at {}:{}: expected " , self . line , self . column
             ));
        if self.expected.len() == 0 {
            try!(write ! ( fmt , "EOF" ));
        } else if self.expected.len() == 1 {
            try!(write ! (
                 fmt , "`{}`" , escape_default (
                 self . expected . iter (  ) . next (  ) . unwrap (  ) ) ));
        } else {
            let mut iter = self.expected.iter();
            try!(write ! (
                 fmt , "one of `{}`" , escape_default (
                 iter . next (  ) . unwrap (  ) ) ));
            for elem in iter {
                try!(write ! ( fmt , ", `{}`" , escape_default ( elem ) ));
            }
        }
        Ok(())
    }
}
impl ::std::error::Error for ParseError {
    fn description(&self) -> &str { "parse error" }
}
fn slice_eq(input: &str, state: &mut ParseState, pos: usize, m: &'static str)
 -> RuleResult<()> {
    #![inline]
    #![allow(dead_code)]
    let l = m.len();
    if input.len() >= pos + l &&
           &input.as_bytes()[pos..pos + l] == m.as_bytes() {
        Matched(pos + l, ())
    } else { state.mark_failure(pos, m) }
}
fn slice_eq_case_insensitive(input: &str, state: &mut ParseState, pos: usize,
                             m: &'static str) -> RuleResult<()> {
    #![inline]
    #![allow(dead_code)]
    let mut used = 0usize;
    let mut input_iter = input[pos..].chars().flat_map(|x| x.to_uppercase());
    for m_char_upper in m.chars().flat_map(|x| x.to_uppercase()) {
        used += m_char_upper.len_utf8();
        let input_char_result = input_iter.next();
        if input_char_result.is_none() ||
               input_char_result.unwrap() != m_char_upper {
            return state.mark_failure(pos, m);
        }
    }
    Matched(pos + used, ())
}
fn any_char(input: &str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    #![inline]
    #![allow(dead_code)]
    if input.len() > pos {
        let (_, next) = char_range_at(input, pos);
        Matched(next, ())
    } else { state.mark_failure(pos, "<character>") }
}
fn pos_to_line(input: &str, pos: usize) -> (usize, usize) {
    let mut remaining = pos;
    let mut lineno: usize = 1;
    for line in input.lines() {
        let line_length = line.len() + 1;
        if remaining < line_length { return (lineno, remaining + 1); }
        remaining -= line_length;
        lineno += 1;
    }
    return (lineno, remaining + 1);
}
struct ParseState<'input> {
    max_err_pos: usize,
    expected: ::std::collections::HashSet<&'static str>,
    _phantom: ::std::marker::PhantomData<&'input ()>,
}
impl <'input> ParseState<'input> {
    fn new() -> ParseState<'input> {
        ParseState{max_err_pos: 0,
                   expected: ::std::collections::HashSet::new(),
                   _phantom: ::std::marker::PhantomData,}
    }
    fn mark_failure(&mut self, pos: usize, expected: &'static str)
     -> RuleResult<()> {
        if pos > self.max_err_pos {
            self.max_err_pos = pos;
            self.expected.clear();
        }
        if pos == self.max_err_pos { self.expected.insert(expected); }
        Failed
    }
}
fn parse_script<'input>(input: &'input str, state: &mut ParseState<'input>,
                        pos: usize) -> RuleResult<Script> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_selector_section(input, state, pos);
            match seq_res {
                Matched(pos, s) => {
                    {
                        let seq_res = parse_mode_separator(input, state, pos);
                        match seq_res {
                            Matched(pos, m) => {
                                {
                                    let seq_res =
                                        parse_action_section(input, state,
                                                             pos);
                                    match seq_res {
                                        Matched(pos, a) => {
                                            {
                                                let match_str =
                                                    &input[start_pos..pos];
                                                Matched(pos,
                                                        {
                                                            Script{selector:
                                                                       s,
                                                                   mode: m,
                                                                   action: a,}
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_space_separator<'input>(input: &'input str,
                                 state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<()> {
    {
        let mut repeat_pos = pos;
        let mut repeat_value = vec!();
        loop  {
            let pos = repeat_pos;
            let step_res =
                if input.len() > pos {
                    let (ch, next) = char_range_at(input, pos);
                    match ch {
                        ' ' | '\t' => Matched(next, ()),
                        _ => state.mark_failure(pos, "[ \t]"),
                    }
                } else { state.mark_failure(pos, "[ \t]") };
            match step_res {
                Matched(newpos, value) => {
                    repeat_pos = newpos;
                    repeat_value.push(value);
                }
                Failed => { break ; }
            }
        }
        if repeat_value.len() >= 1usize {
            Matched(repeat_pos, ())
        } else { Failed }
    }
}
fn parse_ws<'input>(input: &'input str, state: &mut ParseState<'input>,
                    pos: usize) -> RuleResult<()> {
    {
        let mut repeat_pos = pos;
        loop  {
            let pos = repeat_pos;
            let step_res =
                if input.len() > pos {
                    let (ch, next) = char_range_at(input, pos);
                    match ch {
                        ' ' | '\t' => Matched(next, ()),
                        _ => state.mark_failure(pos, "[ \t]"),
                    }
                } else { state.mark_failure(pos, "[ \t]") };
            match step_res {
                Matched(newpos, value) => { repeat_pos = newpos; }
                Failed => { break ; }
            }
        }
        Matched(repeat_pos, ())
    }
}
fn parse_ident<'input>(input: &'input str, state: &mut ParseState<'input>,
                       pos: usize) -> RuleResult<String> {
    {
        let start_pos = pos;
        {
            let seq_res =
                if input.len() > pos {
                    let (ch, next) = char_range_at(input, pos);
                    match ch {
                        'a' ...'z' | 'A' ...'Z' | '_' => Matched(next, ()),
                        _ => state.mark_failure(pos, "[a-zA-Z_]"),
                    }
                } else { state.mark_failure(pos, "[a-zA-Z_]") };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        if input.len() > pos {
                                            let (ch, next) =
                                                char_range_at(input, pos);
                                            match ch {
                                                'a' ...'z' | 'A' ...'Z' | '0'
                                                ...'9' | '_' | '-' =>
                                                Matched(next, ()),
                                                _ =>
                                                state.mark_failure(pos,
                                                                   "[a-zA-Z0-9_-]"),
                                            }
                                        } else {
                                            state.mark_failure(pos,
                                                               "[a-zA-Z0-9_-]")
                                        };
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                Matched(repeat_pos, ())
                            };
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let match_str = &input[start_pos..pos];
                                    Matched(pos, { match_str.to_string() })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_s_string<'input>(input: &'input str, state: &mut ParseState<'input>,
                          pos: usize) -> RuleResult<String> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, state, pos, "\'");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        parse_s_char(input, state, pos);
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                Matched(repeat_pos, repeat_value)
                            };
                        match seq_res {
                            Matched(pos, s) => {
                                {
                                    let seq_res =
                                        slice_eq(input, state, pos, "\'");
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let match_str =
                                                    &input[start_pos..pos];
                                                Matched(pos,
                                                        {
                                                            s.into_iter().collect()
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_d_string<'input>(input: &'input str, state: &mut ParseState<'input>,
                          pos: usize) -> RuleResult<String> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, state, pos, "\"");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        parse_d_char(input, state, pos);
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                Matched(repeat_pos, repeat_value)
                            };
                        match seq_res {
                            Matched(pos, s) => {
                                {
                                    let seq_res =
                                        slice_eq(input, state, pos, "\"");
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let match_str =
                                                    &input[start_pos..pos];
                                                Matched(pos,
                                                        {
                                                            s.into_iter().collect()
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_s_char<'input>(input: &'input str, state: &mut ParseState<'input>,
                        pos: usize) -> RuleResult<char> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let assert_res = slice_eq(input, state, pos, "\'");
                    match assert_res {
                        Failed => Matched(pos, ()),
                        Matched(..) => Failed,
                    }
                };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { match_str.chars().next().unwrap() })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_d_char<'input>(input: &'input str, state: &mut ParseState<'input>,
                        pos: usize) -> RuleResult<char> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let assert_res = slice_eq(input, state, pos, "\"");
                    match assert_res {
                        Failed => Matched(pos, ()),
                        Matched(..) => Failed,
                    }
                };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { match_str.chars().next().unwrap() })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_int<'input>(input: &'input str, state: &mut ParseState<'input>,
                     pos: usize) -> RuleResult<i64> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = slice_eq(input, state, pos, "0");
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let match_str = &input[start_pos..pos];
                                Matched(pos, { 0 + 0 })
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let start_pos = pos;
                {
                    let seq_res =
                        if input.len() > pos {
                            let (ch, next) = char_range_at(input, pos);
                            match ch {
                                '1' ...'9' => Matched(next, ()),
                                _ => state.mark_failure(pos, "[1-9]"),
                            }
                        } else { state.mark_failure(pos, "[1-9]") };
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let seq_res =
                                    {
                                        let mut repeat_pos = pos;
                                        loop  {
                                            let pos = repeat_pos;
                                            let step_res =
                                                if input.len() > pos {
                                                    let (ch, next) =
                                                        char_range_at(input,
                                                                      pos);
                                                    match ch {
                                                        '0' ...'9' =>
                                                        Matched(next, ()),
                                                        _ =>
                                                        state.mark_failure(pos,
                                                                           "[0-9]"),
                                                    }
                                                } else {
                                                    state.mark_failure(pos,
                                                                       "[0-9]")
                                                };
                                            match step_res {
                                                Matched(newpos, value) => {
                                                    repeat_pos = newpos;
                                                }
                                                Failed => { break ; }
                                            }
                                        }
                                        Matched(repeat_pos, ())
                                    };
                                match seq_res {
                                    Matched(pos, _) => {
                                        {
                                            let match_str =
                                                &input[start_pos..pos];
                                            Matched(pos,
                                                    {
                                                        match_str.parse().unwrap()
                                                    })
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            }
        }
    }
}
fn parse_indexer<'input>(input: &'input str, state: &mut ParseState<'input>,
                         pos: usize) -> RuleResult<()> {
    slice_eq(input, state, pos, ".")
}
fn parse_sint<'input>(input: &'input str, state: &mut ParseState<'input>,
                      pos: usize) -> RuleResult<i64> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = slice_eq(input, state, pos, "-");
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let seq_res = parse_int(input, state, pos);
                                match seq_res {
                                    Matched(pos, v) => {
                                        {
                                            let match_str =
                                                &input[start_pos..pos];
                                            Matched(pos, { -v })
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => parse_int(input, state, pos),
        }
    }
}
fn parse_action_literal<'input>(input: &'input str,
                                state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<ActionExpr> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = parse_int(input, state, pos);
                    match seq_res {
                        Matched(pos, i) => {
                            {
                                let match_str = &input[start_pos..pos];
                                Matched(pos, { ActionExpr::Integer(i) })
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res =
                    {
                        let start_pos = pos;
                        {
                            let seq_res = parse_s_string(input, state, pos);
                            match seq_res {
                                Matched(pos, s) => {
                                    {
                                        let match_str =
                                            &input[start_pos..pos];
                                        Matched(pos,
                                                { ActionExpr::String(s) })
                                    }
                                }
                                Failed => Failed,
                            }
                        }
                    };
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => {
                        let choice_res =
                            {
                                let start_pos = pos;
                                {
                                    let seq_res =
                                        parse_d_string(input, state, pos);
                                    match seq_res {
                                        Matched(pos, d) => {
                                            {
                                                let match_str =
                                                    &input[start_pos..pos];
                                                Matched(pos,
                                                        {
                                                            ActionExpr::String(d)
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            };
                        match choice_res {
                            Matched(pos, value) => Matched(pos, value),
                            Failed => {
                                let start_pos = pos;
                                {
                                    let seq_res =
                                        parse_ident(input, state, pos);
                                    match seq_res {
                                        Matched(pos, v) => {
                                            {
                                                let match_str =
                                                    &input[start_pos..pos];
                                                Matched(pos,
                                                        {
                                                            ActionExpr::Variable(v)
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_action_object_index<'input>(input: &'input str,
                                     state: &mut ParseState<'input>,
                                     pos: usize) -> RuleResult<ActionExpr> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_indexer(input, state, pos);
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            parse_object_index_name(input, state, pos);
                        match seq_res {
                            Matched(pos, n) => {
                                {
                                    let match_str = &input[start_pos..pos];
                                    Matched(pos,
                                            { ActionExpr::ObjectIndex(n) })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_object_index_name<'input>(input: &'input str,
                                   state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<String> {
    {
        let choice_res = parse_ident(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res = parse_s_string(input, state, pos);
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => parse_d_string(input, state, pos),
                }
            }
        }
    }
}
fn parse_l_square<'input>(input: &'input str, state: &mut ParseState<'input>,
                          pos: usize) -> RuleResult<()> {
    {
        let seq_res = parse_ws(input, state, pos);
        match seq_res {
            Matched(pos, _) => {
                {
                    let seq_res = slice_eq(input, state, pos, "[");
                    match seq_res {
                        Matched(pos, _) => { parse_ws(input, state, pos) }
                        Failed => Failed,
                    }
                }
            }
            Failed => Failed,
        }
    }
}
fn parse_r_square<'input>(input: &'input str, state: &mut ParseState<'input>,
                          pos: usize) -> RuleResult<()> {
    {
        let seq_res = parse_ws(input, state, pos);
        match seq_res {
            Matched(pos, _) => {
                {
                    let seq_res = slice_eq(input, state, pos, "]");
                    match seq_res {
                        Matched(pos, _) => { parse_ws(input, state, pos) }
                        Failed => Failed,
                    }
                }
            }
            Failed => Failed,
        }
    }
}
fn parse_colon<'input>(input: &'input str, state: &mut ParseState<'input>,
                       pos: usize) -> RuleResult<()> {
    {
        let seq_res = parse_ws(input, state, pos);
        match seq_res {
            Matched(pos, _) => {
                {
                    let seq_res = slice_eq(input, state, pos, ":");
                    match seq_res {
                        Matched(pos, _) => { parse_ws(input, state, pos) }
                        Failed => Failed,
                    }
                }
            }
            Failed => Failed,
        }
    }
}
fn parse_mode_separator<'input>(input: &'input str,
                                state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<ActionMode> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = parse_ws(input, state, pos);
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let seq_res =
                                    slice_eq(input, state, pos, "@");
                                match seq_res {
                                    Matched(pos, _) => {
                                        {
                                            let seq_res =
                                                parse_ws(input, state, pos);
                                            match seq_res {
                                                Matched(pos, _) => {
                                                    {
                                                        let match_str =
                                                            &input[start_pos..pos];
                                                        Matched(pos,
                                                                {
                                                                    ActionMode::ForSelf
                                                                })
                                                    }
                                                }
                                                Failed => Failed,
                                            }
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let start_pos = pos;
                {
                    let seq_res = parse_ws(input, state, pos);
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let seq_res =
                                    slice_eq(input, state, pos, "%");
                                match seq_res {
                                    Matched(pos, _) => {
                                        {
                                            let seq_res =
                                                parse_ws(input, state, pos);
                                            match seq_res {
                                                Matched(pos, _) => {
                                                    {
                                                        let match_str =
                                                            &input[start_pos..pos];
                                                        Matched(pos,
                                                                {
                                                                    ActionMode::ForEach
                                                                })
                                                    }
                                                }
                                                Failed => Failed,
                                            }
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            }
        }
    }
}
fn parse_action_separator<'input>(input: &'input str,
                                  state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<()> {
    {
        let seq_res = parse_ws(input, state, pos);
        match seq_res {
            Matched(pos, _) => {
                {
                    let seq_res = slice_eq(input, state, pos, ";");
                    match seq_res {
                        Matched(pos, _) => { parse_ws(input, state, pos) }
                        Failed => Failed,
                    }
                }
            }
            Failed => Failed,
        }
    }
}
fn parse_selector_section<'input>(input: &'input str,
                                  state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<Vec<Jop>> {
    {
        let mut repeat_pos = pos;
        let mut repeat_value = vec!();
        loop  {
            let pos = repeat_pos;
            let pos =
                if repeat_value.len() > 0 {
                    let sep_res = slice_eq(input, state, pos, ".");
                    match sep_res {
                        Matched(newpos, _) => { newpos }
                        Failed => break ,
                    }
                } else { pos };
            let step_res = parse_selector(input, state, pos);
            match step_res {
                Matched(newpos, value) => {
                    repeat_pos = newpos;
                    repeat_value.push(value);
                }
                Failed => { break ; }
            }
        }
        Matched(repeat_pos, repeat_value)
    }
}
fn parse_selector<'input>(input: &'input str, state: &mut ParseState<'input>,
                          pos: usize) -> RuleResult<Jop> {
    {
        let choice_res = parse_array_selector(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => parse_object_selector(input, state, pos),
        }
    }
}
fn parse_array_selector<'input>(input: &'input str,
                                state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<Jop> {
    {
        let choice_res = parse_array_index_selector(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => parse_array_slice_selector(input, state, pos),
        }
    }
}
fn parse_array_index_selector<'input>(input: &'input str,
                                      state: &mut ParseState<'input>,
                                      pos: usize) -> RuleResult<Jop> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_l_square(input, state, pos);
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res = parse_sint(input, state, pos);
                        match seq_res {
                            Matched(pos, index) => {
                                {
                                    let seq_res =
                                        parse_r_square(input, state, pos);
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let match_str =
                                                    &input[start_pos..pos];
                                                Matched(pos,
                                                        {
                                                            Jop::ArrayIndex(index)
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_array_slice_selector<'input>(input: &'input str,
                                      state: &mut ParseState<'input>,
                                      pos: usize) -> RuleResult<Jop> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_l_square(input, state, pos);
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            match parse_sint(input, state, pos) {
                                Matched(newpos, value) => {
                                    Matched(newpos, Some(value))
                                }
                                Failed => { Matched(pos, None) }
                            };
                        match seq_res {
                            Matched(pos, start) => {
                                {
                                    let seq_res =
                                        parse_colon(input, state, pos);
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    match parse_sint(input,
                                                                     state,
                                                                     pos) {
                                                        Matched(newpos, value)
                                                        => {
                                                            Matched(newpos,
                                                                    Some(value))
                                                        }
                                                        Failed => {
                                                            Matched(pos, None)
                                                        }
                                                    };
                                                match seq_res {
                                                    Matched(pos, end) => {
                                                        {
                                                            let seq_res =
                                                                parse_r_square(input,
                                                                               state,
                                                                               pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        _) =>
                                                                {
                                                                    {
                                                                        let match_str =
                                                                            &input[start_pos..pos];
                                                                        Matched(pos,
                                                                                {
                                                                                    Jop::ArraySlice(ArraySlice::new(start,
                                                                                                                    end,
                                                                                                                    None))
                                                                                })
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_object_selector<'input>(input: &'input str,
                                 state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<Jop> {
    {
        let choice_res = parse_wildcard_object_selector(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => parse_member_object_selector(input, state, pos),
        }
    }
}
fn parse_wildcard_object_selector<'input>(input: &'input str,
                                          state: &mut ParseState<'input>,
                                          pos: usize) -> RuleResult<Jop> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, state, pos, "*");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos,
                                { Jop::Object(ObjectSelector::Wildcard) })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_member_object_selector<'input>(input: &'input str,
                                        state: &mut ParseState<'input>,
                                        pos: usize) -> RuleResult<Jop> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_object_index_name(input, state, pos);
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos,
                                {
                                    Jop::Object(ObjectSelector::Exact(match_str.to_string()))
                                })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_action_section<'input>(input: &'input str,
                                state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<Vec<Function>> {
    {
        let mut repeat_pos = pos;
        let mut repeat_value = vec!();
        loop  {
            let pos = repeat_pos;
            let pos =
                if repeat_value.len() > 0 {
                    let sep_res = parse_action_separator(input, state, pos);
                    match sep_res {
                        Matched(newpos, _) => { newpos }
                        Failed => break ,
                    }
                } else { pos };
            let step_res = parse_action_func(input, state, pos);
            match step_res {
                Matched(newpos, value) => {
                    repeat_pos = newpos;
                    repeat_value.push(value);
                }
                Failed => { break ; }
            }
        }
        Matched(repeat_pos, repeat_value)
    }
}
fn parse_action_func<'input>(input: &'input str,
                             state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<Function> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_ident(input, state, pos);
            match seq_res {
                Matched(pos, n) => {
                    {
                        let seq_res =
                            parse_space_separator(input, state, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        parse_action_expr_list(input, state,
                                                               pos);
                                    match seq_res {
                                        Matched(pos, p) => {
                                            {
                                                let match_str =
                                                    &input[start_pos..pos];
                                                Matched(pos,
                                                        {
                                                            Function{name: n,
                                                                     args: p,}
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_action_expr_list<'input>(input: &'input str,
                                  state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<Vec<ActionExpr>> {
    {
        let mut repeat_pos = pos;
        let mut repeat_value = vec!();
        loop  {
            let pos = repeat_pos;
            let pos =
                if repeat_value.len() > 0 {
                    let sep_res = parse_space_separator(input, state, pos);
                    match sep_res {
                        Matched(newpos, _) => { newpos }
                        Failed => break ,
                    }
                } else { pos };
            let step_res = parse_action_expr(input, state, pos);
            match step_res {
                Matched(newpos, value) => {
                    repeat_pos = newpos;
                    repeat_value.push(value);
                }
                Failed => { break ; }
            }
        }
        Matched(repeat_pos, repeat_value)
    }
}
fn parse_action_expr<'input>(input: &'input str,
                             state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<ActionExpr> {
    {
        let choice_res = parse_action_literal(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => parse_action_object_index(input, state, pos),
        }
    }
}
pub fn script<'input>(input: &'input str) -> ParseResult<Script> {
    let mut state = ParseState::new();
    match parse_script(input, &mut state, 0) {
        Matched(pos, value) => { if pos == input.len() { return Ok(value) } }
        _ => { }
    }
    let (line, col) = pos_to_line(input, state.max_err_pos);
    Err(ParseError{line: line,
                   column: col,
                   offset: state.max_err_pos,
                   expected: state.expected,})
}
